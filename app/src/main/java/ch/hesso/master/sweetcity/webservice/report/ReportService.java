/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://code.google.com/p/google-apis-client-generator/
 * (build: 2014-11-17 18:43:33 UTC)
 * on 2014-11-26 at 09:28:18 UTC 
 * Modify at your own risk.
 */

package ch.hesso.master.sweetcity.webservice.report;

import ch.hesso.master.sweetcity.model.Report;
import ch.hesso.master.sweetcity.model.ReportCollection;

/**
 * Service definition for ReportService (v1).
 *
 * <p>
 * API to manage user reports on SweetCity.
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link ReportServiceRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class ReportService extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 15,
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.15 of google-api-client to run version " +
        "1.19.0 of the reportService library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://mse-sweetcity.appspot.com/_ah/api/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "reportService/v1/";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public ReportService(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  ReportService(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * An accessor for creating requests from the ReportServiceOperations collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code ReportService reportService = new ReportService(...);}
   *   {@code ReportService.ReportServiceOperations.List request = reportService.reportService().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public ReportServiceOperations reportService() {
    return new ReportServiceOperations();
  }

  /**
   * The "reportService" collection of methods.
   */
  public class ReportServiceOperations {

    /**
     * Create a request for the method "reportService.addReport".
     *
     * This request holds the parameters needed by the reportService server.  After setting any optional
     * parameters, call the {@link AddReport#execute()} method to invoke the remote operation.
     *
     * @param content the {@link Report}
     * @return the request
     */
    public AddReport addReport(Report content) throws java.io.IOException {
      AddReport result = new AddReport(content);
      initialize(result);
      return result;
    }

    public class AddReport extends ReportServiceRequest<Void> {

      private static final String REST_PATH = "addReport";

      /**
       * Create a request for the method "reportService.addReport".
       *
       * This request holds the parameters needed by the the reportService server.  After setting any
       * optional parameters, call the {@link AddReport#execute()} method to invoke the remote
       * operation. <p> {@link
       * AddReport#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param content the {@link Report}
       * @since 1.13
       */
      protected AddReport(Report content) {
        super(ReportService.this, "POST", REST_PATH, content, Void.class);
      }

      @Override
      public AddReport setAlt(java.lang.String alt) {
        return (AddReport) super.setAlt(alt);
      }

      @Override
      public AddReport setFields(java.lang.String fields) {
        return (AddReport) super.setFields(fields);
      }

      @Override
      public AddReport setKey(java.lang.String key) {
        return (AddReport) super.setKey(key);
      }

      @Override
      public AddReport setOauthToken(java.lang.String oauthToken) {
        return (AddReport) super.setOauthToken(oauthToken);
      }

      @Override
      public AddReport setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (AddReport) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public AddReport setQuotaUser(java.lang.String quotaUser) {
        return (AddReport) super.setQuotaUser(quotaUser);
      }

      @Override
      public AddReport setUserIp(java.lang.String userIp) {
        return (AddReport) super.setUserIp(userIp);
      }

      @Override
      public AddReport set(String parameterName, Object value) {
        return (AddReport) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "reportService.addReportWith".
     *
     * This request holds the parameters needed by the reportService server.  After setting any optional
     * parameters, call the {@link AddReportWith#execute()} method to invoke the remote operation.
     *
     * @param image
     * @param latitude
     * @param longitude
     * @return the request
     */
    public AddReportWith addReportWith(java.lang.String image, java.lang.Float latitude, java.lang.Float longitude) throws java.io.IOException {
      AddReportWith result = new AddReportWith(image, latitude, longitude);
      initialize(result);
      return result;
    }

    public class AddReportWith extends ReportServiceRequest<Void> {

      private static final String REST_PATH = "addReportWith/{image}/{latitude}/{longitude}";

      /**
       * Create a request for the method "reportService.addReportWith".
       *
       * This request holds the parameters needed by the the reportService server.  After setting any
       * optional parameters, call the {@link AddReportWith#execute()} method to invoke the remote
       * operation. <p> {@link AddReportWith#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be called to initialize this instance immediately after invoking
       * the constructor. </p>
       *
       * @param image
       * @param latitude
       * @param longitude
       * @since 1.13
       */
      protected AddReportWith(java.lang.String image, java.lang.Float latitude, java.lang.Float longitude) {
        super(ReportService.this, "POST", REST_PATH, null, Void.class);
        this.image = com.google.api.client.util.Preconditions.checkNotNull(image, "Required parameter image must be specified.");
        this.latitude = com.google.api.client.util.Preconditions.checkNotNull(latitude, "Required parameter latitude must be specified.");
        this.longitude = com.google.api.client.util.Preconditions.checkNotNull(longitude, "Required parameter longitude must be specified.");
      }

      @Override
      public AddReportWith setAlt(java.lang.String alt) {
        return (AddReportWith) super.setAlt(alt);
      }

      @Override
      public AddReportWith setFields(java.lang.String fields) {
        return (AddReportWith) super.setFields(fields);
      }

      @Override
      public AddReportWith setKey(java.lang.String key) {
        return (AddReportWith) super.setKey(key);
      }

      @Override
      public AddReportWith setOauthToken(java.lang.String oauthToken) {
        return (AddReportWith) super.setOauthToken(oauthToken);
      }

      @Override
      public AddReportWith setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (AddReportWith) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public AddReportWith setQuotaUser(java.lang.String quotaUser) {
        return (AddReportWith) super.setQuotaUser(quotaUser);
      }

      @Override
      public AddReportWith setUserIp(java.lang.String userIp) {
        return (AddReportWith) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.String image;

      /**

       */
      public java.lang.String getImage() {
        return image;
      }

      public AddReportWith setImage(java.lang.String image) {
        this.image = image;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.Float latitude;

      /**

       */
      public java.lang.Float getLatitude() {
        return latitude;
      }

      public AddReportWith setLatitude(java.lang.Float latitude) {
        this.latitude = latitude;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.Float longitude;

      /**

       */
      public java.lang.Float getLongitude() {
        return longitude;
      }

      public AddReportWith setLongitude(java.lang.Float longitude) {
        this.longitude = longitude;
        return this;
      }

      @Override
      public AddReportWith set(String parameterName, Object value) {
        return (AddReportWith) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "reportService.addTag".
     *
     * This request holds the parameters needed by the reportService server.  After setting any optional
     * parameters, call the {@link AddTag#execute()} method to invoke the remote operation.
     *
     * @param reportId
     * @param tagId
     * @return the request
     */
    public AddTag addTag(java.lang.Long reportId, java.lang.Long tagId) throws java.io.IOException {
      AddTag result = new AddTag(reportId, tagId);
      initialize(result);
      return result;
    }

    public class AddTag extends ReportServiceRequest<Void> {

      private static final String REST_PATH = "addTag/{reportId}/{tagId}";

      /**
       * Create a request for the method "reportService.addTag".
       *
       * This request holds the parameters needed by the the reportService server.  After setting any
       * optional parameters, call the {@link AddTag#execute()} method to invoke the remote operation.
       * <p> {@link
       * AddTag#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param reportId
       * @param tagId
       * @since 1.13
       */
      protected AddTag(java.lang.Long reportId, java.lang.Long tagId) {
        super(ReportService.this, "GET", REST_PATH, null, Void.class);
        this.reportId = com.google.api.client.util.Preconditions.checkNotNull(reportId, "Required parameter reportId must be specified.");
        this.tagId = com.google.api.client.util.Preconditions.checkNotNull(tagId, "Required parameter tagId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public AddTag setAlt(java.lang.String alt) {
        return (AddTag) super.setAlt(alt);
      }

      @Override
      public AddTag setFields(java.lang.String fields) {
        return (AddTag) super.setFields(fields);
      }

      @Override
      public AddTag setKey(java.lang.String key) {
        return (AddTag) super.setKey(key);
      }

      @Override
      public AddTag setOauthToken(java.lang.String oauthToken) {
        return (AddTag) super.setOauthToken(oauthToken);
      }

      @Override
      public AddTag setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (AddTag) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public AddTag setQuotaUser(java.lang.String quotaUser) {
        return (AddTag) super.setQuotaUser(quotaUser);
      }

      @Override
      public AddTag setUserIp(java.lang.String userIp) {
        return (AddTag) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Long reportId;

      /**

       */
      public java.lang.Long getReportId() {
        return reportId;
      }

      public AddTag setReportId(java.lang.Long reportId) {
        this.reportId = reportId;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.Long tagId;

      /**

       */
      public java.lang.Long getTagId() {
        return tagId;
      }

      public AddTag setTagId(java.lang.Long tagId) {
        this.tagId = tagId;
        return this;
      }

      @Override
      public AddTag set(String parameterName, Object value) {
        return (AddTag) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "reportService.addVote".
     *
     * This request holds the parameters needed by the reportService server.  After setting any optional
     * parameters, call the {@link AddVote#execute()} method to invoke the remote operation.
     *
     * @param reportId
     * @return the request
     */
    public AddVote addVote(java.lang.Long reportId) throws java.io.IOException {
      AddVote result = new AddVote(reportId);
      initialize(result);
      return result;
    }

    public class AddVote extends ReportServiceRequest<Void> {

      private static final String REST_PATH = "addVote/{reportId}";

      /**
       * Create a request for the method "reportService.addVote".
       *
       * This request holds the parameters needed by the the reportService server.  After setting any
       * optional parameters, call the {@link AddVote#execute()} method to invoke the remote operation.
       * <p> {@link
       * AddVote#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param reportId
       * @since 1.13
       */
      protected AddVote(java.lang.Long reportId) {
        super(ReportService.this, "GET", REST_PATH, null, Void.class);
        this.reportId = com.google.api.client.util.Preconditions.checkNotNull(reportId, "Required parameter reportId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public AddVote setAlt(java.lang.String alt) {
        return (AddVote) super.setAlt(alt);
      }

      @Override
      public AddVote setFields(java.lang.String fields) {
        return (AddVote) super.setFields(fields);
      }

      @Override
      public AddVote setKey(java.lang.String key) {
        return (AddVote) super.setKey(key);
      }

      @Override
      public AddVote setOauthToken(java.lang.String oauthToken) {
        return (AddVote) super.setOauthToken(oauthToken);
      }

      @Override
      public AddVote setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (AddVote) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public AddVote setQuotaUser(java.lang.String quotaUser) {
        return (AddVote) super.setQuotaUser(quotaUser);
      }

      @Override
      public AddVote setUserIp(java.lang.String userIp) {
        return (AddVote) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Long reportId;

      /**

       */
      public java.lang.Long getReportId() {
        return reportId;
      }

      public AddVote setReportId(java.lang.Long reportId) {
        this.reportId = reportId;
        return this;
      }

      @Override
      public AddVote set(String parameterName, Object value) {
        return (AddVote) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "reportService.getListReportBySubmitDate".
     *
     * This request holds the parameters needed by the reportService server.  After setting any optional
     * parameters, call the {@link GetListReportBySubmitDate#execute()} method to invoke the remote
     * operation.
     *
     * @return the request
     */
    public GetListReportBySubmitDate getListReportBySubmitDate() throws java.io.IOException {
      GetListReportBySubmitDate result = new GetListReportBySubmitDate();
      initialize(result);
      return result;
    }

    public class GetListReportBySubmitDate extends ReportServiceRequest<ReportCollection> {

      private static final String REST_PATH = "listReportBySubmitDate";

      /**
       * Create a request for the method "reportService.getListReportBySubmitDate".
       *
       * This request holds the parameters needed by the the reportService server.  After setting any
       * optional parameters, call the {@link GetListReportBySubmitDate#execute()} method to invoke the
       * remote operation. <p> {@link GetListReportBySubmitDate#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be called to initialize this instance
       * immediately after invoking the constructor. </p>
       *
       * @since 1.13
       */
      protected GetListReportBySubmitDate() {
        super(ReportService.this, "GET", REST_PATH, null, ReportCollection.class);
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public GetListReportBySubmitDate setAlt(java.lang.String alt) {
        return (GetListReportBySubmitDate) super.setAlt(alt);
      }

      @Override
      public GetListReportBySubmitDate setFields(java.lang.String fields) {
        return (GetListReportBySubmitDate) super.setFields(fields);
      }

      @Override
      public GetListReportBySubmitDate setKey(java.lang.String key) {
        return (GetListReportBySubmitDate) super.setKey(key);
      }

      @Override
      public GetListReportBySubmitDate setOauthToken(java.lang.String oauthToken) {
        return (GetListReportBySubmitDate) super.setOauthToken(oauthToken);
      }

      @Override
      public GetListReportBySubmitDate setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (GetListReportBySubmitDate) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public GetListReportBySubmitDate setQuotaUser(java.lang.String quotaUser) {
        return (GetListReportBySubmitDate) super.setQuotaUser(quotaUser);
      }

      @Override
      public GetListReportBySubmitDate setUserIp(java.lang.String userIp) {
        return (GetListReportBySubmitDate) super.setUserIp(userIp);
      }

      @Override
      public GetListReportBySubmitDate set(String parameterName, Object value) {
        return (GetListReportBySubmitDate) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "reportService.getListReportByValidationDate".
     *
     * This request holds the parameters needed by the reportService server.  After setting any optional
     * parameters, call the {@link GetListReportByValidationDate#execute()} method to invoke the remote
     * operation.
     *
     * @return the request
     */
    public GetListReportByValidationDate getListReportByValidationDate() throws java.io.IOException {
      GetListReportByValidationDate result = new GetListReportByValidationDate();
      initialize(result);
      return result;
    }

    public class GetListReportByValidationDate extends ReportServiceRequest<ReportCollection> {

      private static final String REST_PATH = "listReportByValidationDate";

      /**
       * Create a request for the method "reportService.getListReportByValidationDate".
       *
       * This request holds the parameters needed by the the reportService server.  After setting any
       * optional parameters, call the {@link GetListReportByValidationDate#execute()} method to invoke
       * the remote operation. <p> {@link GetListReportByValidationDate#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be called to initialize this instance
       * immediately after invoking the constructor. </p>
       *
       * @since 1.13
       */
      protected GetListReportByValidationDate() {
        super(ReportService.this, "GET", REST_PATH, null, ReportCollection.class);
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public GetListReportByValidationDate setAlt(java.lang.String alt) {
        return (GetListReportByValidationDate) super.setAlt(alt);
      }

      @Override
      public GetListReportByValidationDate setFields(java.lang.String fields) {
        return (GetListReportByValidationDate) super.setFields(fields);
      }

      @Override
      public GetListReportByValidationDate setKey(java.lang.String key) {
        return (GetListReportByValidationDate) super.setKey(key);
      }

      @Override
      public GetListReportByValidationDate setOauthToken(java.lang.String oauthToken) {
        return (GetListReportByValidationDate) super.setOauthToken(oauthToken);
      }

      @Override
      public GetListReportByValidationDate setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (GetListReportByValidationDate) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public GetListReportByValidationDate setQuotaUser(java.lang.String quotaUser) {
        return (GetListReportByValidationDate) super.setQuotaUser(quotaUser);
      }

      @Override
      public GetListReportByValidationDate setUserIp(java.lang.String userIp) {
        return (GetListReportByValidationDate) super.setUserIp(userIp);
      }

      @Override
      public GetListReportByValidationDate set(String parameterName, Object value) {
        return (GetListReportByValidationDate) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "reportService.getListReportByVote".
     *
     * This request holds the parameters needed by the reportService server.  After setting any optional
     * parameters, call the {@link GetListReportByVote#execute()} method to invoke the remote operation.
     *
     * @return the request
     */
    public GetListReportByVote getListReportByVote() throws java.io.IOException {
      GetListReportByVote result = new GetListReportByVote();
      initialize(result);
      return result;
    }

    public class GetListReportByVote extends ReportServiceRequest<ReportCollection> {

      private static final String REST_PATH = "listReportByVote";

      /**
       * Create a request for the method "reportService.getListReportByVote".
       *
       * This request holds the parameters needed by the the reportService server.  After setting any
       * optional parameters, call the {@link GetListReportByVote#execute()} method to invoke the remote
       * operation. <p> {@link GetListReportByVote#initialize(com.google.api.client.googleapis.services.
       * AbstractGoogleClientRequest)} must be called to initialize this instance immediately after
       * invoking the constructor. </p>
       *
       * @since 1.13
       */
      protected GetListReportByVote() {
        super(ReportService.this, "GET", REST_PATH, null, ReportCollection.class);
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public GetListReportByVote setAlt(java.lang.String alt) {
        return (GetListReportByVote) super.setAlt(alt);
      }

      @Override
      public GetListReportByVote setFields(java.lang.String fields) {
        return (GetListReportByVote) super.setFields(fields);
      }

      @Override
      public GetListReportByVote setKey(java.lang.String key) {
        return (GetListReportByVote) super.setKey(key);
      }

      @Override
      public GetListReportByVote setOauthToken(java.lang.String oauthToken) {
        return (GetListReportByVote) super.setOauthToken(oauthToken);
      }

      @Override
      public GetListReportByVote setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (GetListReportByVote) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public GetListReportByVote setQuotaUser(java.lang.String quotaUser) {
        return (GetListReportByVote) super.setQuotaUser(quotaUser);
      }

      @Override
      public GetListReportByVote setUserIp(java.lang.String userIp) {
        return (GetListReportByVote) super.setUserIp(userIp);
      }

      @Override
      public GetListReportByVote set(String parameterName, Object value) {
        return (GetListReportByVote) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "reportService.getListReportUserBySubmitDate".
     *
     * This request holds the parameters needed by the reportService server.  After setting any optional
     * parameters, call the {@link GetListReportUserBySubmitDate#execute()} method to invoke the remote
     * operation.
     *
     * @return the request
     */
    public GetListReportUserBySubmitDate getListReportUserBySubmitDate() throws java.io.IOException {
      GetListReportUserBySubmitDate result = new GetListReportUserBySubmitDate();
      initialize(result);
      return result;
    }

    public class GetListReportUserBySubmitDate extends ReportServiceRequest<ReportCollection> {

      private static final String REST_PATH = "listReportUserBySubmitDate";

      /**
       * Create a request for the method "reportService.getListReportUserBySubmitDate".
       *
       * This request holds the parameters needed by the the reportService server.  After setting any
       * optional parameters, call the {@link GetListReportUserBySubmitDate#execute()} method to invoke
       * the remote operation. <p> {@link GetListReportUserBySubmitDate#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be called to initialize this instance
       * immediately after invoking the constructor. </p>
       *
       * @since 1.13
       */
      protected GetListReportUserBySubmitDate() {
        super(ReportService.this, "GET", REST_PATH, null, ReportCollection.class);
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public GetListReportUserBySubmitDate setAlt(java.lang.String alt) {
        return (GetListReportUserBySubmitDate) super.setAlt(alt);
      }

      @Override
      public GetListReportUserBySubmitDate setFields(java.lang.String fields) {
        return (GetListReportUserBySubmitDate) super.setFields(fields);
      }

      @Override
      public GetListReportUserBySubmitDate setKey(java.lang.String key) {
        return (GetListReportUserBySubmitDate) super.setKey(key);
      }

      @Override
      public GetListReportUserBySubmitDate setOauthToken(java.lang.String oauthToken) {
        return (GetListReportUserBySubmitDate) super.setOauthToken(oauthToken);
      }

      @Override
      public GetListReportUserBySubmitDate setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (GetListReportUserBySubmitDate) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public GetListReportUserBySubmitDate setQuotaUser(java.lang.String quotaUser) {
        return (GetListReportUserBySubmitDate) super.setQuotaUser(quotaUser);
      }

      @Override
      public GetListReportUserBySubmitDate setUserIp(java.lang.String userIp) {
        return (GetListReportUserBySubmitDate) super.setUserIp(userIp);
      }

      @Override
      public GetListReportUserBySubmitDate set(String parameterName, Object value) {
        return (GetListReportUserBySubmitDate) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "reportService.getListReportUserByValidationDate".
     *
     * This request holds the parameters needed by the reportService server.  After setting any optional
     * parameters, call the {@link GetListReportUserByValidationDate#execute()} method to invoke the
     * remote operation.
     *
     * @return the request
     */
    public GetListReportUserByValidationDate getListReportUserByValidationDate() throws java.io.IOException {
      GetListReportUserByValidationDate result = new GetListReportUserByValidationDate();
      initialize(result);
      return result;
    }

    public class GetListReportUserByValidationDate extends ReportServiceRequest<ReportCollection> {

      private static final String REST_PATH = "listReportUserByValidationDate";

      /**
       * Create a request for the method "reportService.getListReportUserByValidationDate".
       *
       * This request holds the parameters needed by the the reportService server.  After setting any
       * optional parameters, call the {@link GetListReportUserByValidationDate#execute()} method to
       * invoke the remote operation. <p> {@link GetListReportUserByValidationDate#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be called to initialize this
       * instance immediately after invoking the constructor. </p>
       *
       * @since 1.13
       */
      protected GetListReportUserByValidationDate() {
        super(ReportService.this, "GET", REST_PATH, null, ReportCollection.class);
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public GetListReportUserByValidationDate setAlt(java.lang.String alt) {
        return (GetListReportUserByValidationDate) super.setAlt(alt);
      }

      @Override
      public GetListReportUserByValidationDate setFields(java.lang.String fields) {
        return (GetListReportUserByValidationDate) super.setFields(fields);
      }

      @Override
      public GetListReportUserByValidationDate setKey(java.lang.String key) {
        return (GetListReportUserByValidationDate) super.setKey(key);
      }

      @Override
      public GetListReportUserByValidationDate setOauthToken(java.lang.String oauthToken) {
        return (GetListReportUserByValidationDate) super.setOauthToken(oauthToken);
      }

      @Override
      public GetListReportUserByValidationDate setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (GetListReportUserByValidationDate) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public GetListReportUserByValidationDate setQuotaUser(java.lang.String quotaUser) {
        return (GetListReportUserByValidationDate) super.setQuotaUser(quotaUser);
      }

      @Override
      public GetListReportUserByValidationDate setUserIp(java.lang.String userIp) {
        return (GetListReportUserByValidationDate) super.setUserIp(userIp);
      }

      @Override
      public GetListReportUserByValidationDate set(String parameterName, Object value) {
        return (GetListReportUserByValidationDate) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "reportService.getListReportUserByVote".
     *
     * This request holds the parameters needed by the reportService server.  After setting any optional
     * parameters, call the {@link GetListReportUserByVote#execute()} method to invoke the remote
     * operation.
     *
     * @return the request
     */
    public GetListReportUserByVote getListReportUserByVote() throws java.io.IOException {
      GetListReportUserByVote result = new GetListReportUserByVote();
      initialize(result);
      return result;
    }

    public class GetListReportUserByVote extends ReportServiceRequest<ReportCollection> {

      private static final String REST_PATH = "listReportUserByVote";

      /**
       * Create a request for the method "reportService.getListReportUserByVote".
       *
       * This request holds the parameters needed by the the reportService server.  After setting any
       * optional parameters, call the {@link GetListReportUserByVote#execute()} method to invoke the
       * remote operation. <p> {@link GetListReportUserByVote#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be called to initialize this instance immediately
       * after invoking the constructor. </p>
       *
       * @since 1.13
       */
      protected GetListReportUserByVote() {
        super(ReportService.this, "GET", REST_PATH, null, ReportCollection.class);
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public GetListReportUserByVote setAlt(java.lang.String alt) {
        return (GetListReportUserByVote) super.setAlt(alt);
      }

      @Override
      public GetListReportUserByVote setFields(java.lang.String fields) {
        return (GetListReportUserByVote) super.setFields(fields);
      }

      @Override
      public GetListReportUserByVote setKey(java.lang.String key) {
        return (GetListReportUserByVote) super.setKey(key);
      }

      @Override
      public GetListReportUserByVote setOauthToken(java.lang.String oauthToken) {
        return (GetListReportUserByVote) super.setOauthToken(oauthToken);
      }

      @Override
      public GetListReportUserByVote setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (GetListReportUserByVote) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public GetListReportUserByVote setQuotaUser(java.lang.String quotaUser) {
        return (GetListReportUserByVote) super.setQuotaUser(quotaUser);
      }

      @Override
      public GetListReportUserByVote setUserIp(java.lang.String userIp) {
        return (GetListReportUserByVote) super.setUserIp(userIp);
      }

      @Override
      public GetListReportUserByVote set(String parameterName, Object value) {
        return (GetListReportUserByVote) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "reportService.removeReport".
     *
     * This request holds the parameters needed by the reportService server.  After setting any optional
     * parameters, call the {@link RemoveReport#execute()} method to invoke the remote operation.
     *
     * @param reportId
     * @return the request
     */
    public RemoveReport removeReport(java.lang.Long reportId) throws java.io.IOException {
      RemoveReport result = new RemoveReport(reportId);
      initialize(result);
      return result;
    }

    public class RemoveReport extends ReportServiceRequest<Void> {

      private static final String REST_PATH = "removeReport/{reportId}";

      /**
       * Create a request for the method "reportService.removeReport".
       *
       * This request holds the parameters needed by the the reportService server.  After setting any
       * optional parameters, call the {@link RemoveReport#execute()} method to invoke the remote
       * operation. <p> {@link
       * RemoveReport#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param reportId
       * @since 1.13
       */
      protected RemoveReport(java.lang.Long reportId) {
        super(ReportService.this, "GET", REST_PATH, null, Void.class);
        this.reportId = com.google.api.client.util.Preconditions.checkNotNull(reportId, "Required parameter reportId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public RemoveReport setAlt(java.lang.String alt) {
        return (RemoveReport) super.setAlt(alt);
      }

      @Override
      public RemoveReport setFields(java.lang.String fields) {
        return (RemoveReport) super.setFields(fields);
      }

      @Override
      public RemoveReport setKey(java.lang.String key) {
        return (RemoveReport) super.setKey(key);
      }

      @Override
      public RemoveReport setOauthToken(java.lang.String oauthToken) {
        return (RemoveReport) super.setOauthToken(oauthToken);
      }

      @Override
      public RemoveReport setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (RemoveReport) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public RemoveReport setQuotaUser(java.lang.String quotaUser) {
        return (RemoveReport) super.setQuotaUser(quotaUser);
      }

      @Override
      public RemoveReport setUserIp(java.lang.String userIp) {
        return (RemoveReport) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Long reportId;

      /**

       */
      public java.lang.Long getReportId() {
        return reportId;
      }

      public RemoveReport setReportId(java.lang.Long reportId) {
        this.reportId = reportId;
        return this;
      }

      @Override
      public RemoveReport set(String parameterName, Object value) {
        return (RemoveReport) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "reportService.removeTag".
     *
     * This request holds the parameters needed by the reportService server.  After setting any optional
     * parameters, call the {@link RemoveTag#execute()} method to invoke the remote operation.
     *
     * @param reportId
     * @param tagId
     * @return the request
     */
    public RemoveTag removeTag(java.lang.Long reportId, java.lang.Long tagId) throws java.io.IOException {
      RemoveTag result = new RemoveTag(reportId, tagId);
      initialize(result);
      return result;
    }

    public class RemoveTag extends ReportServiceRequest<Void> {

      private static final String REST_PATH = "removeTag/{reportId}/{tagId}";

      /**
       * Create a request for the method "reportService.removeTag".
       *
       * This request holds the parameters needed by the the reportService server.  After setting any
       * optional parameters, call the {@link RemoveTag#execute()} method to invoke the remote
       * operation. <p> {@link
       * RemoveTag#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param reportId
       * @param tagId
       * @since 1.13
       */
      protected RemoveTag(java.lang.Long reportId, java.lang.Long tagId) {
        super(ReportService.this, "GET", REST_PATH, null, Void.class);
        this.reportId = com.google.api.client.util.Preconditions.checkNotNull(reportId, "Required parameter reportId must be specified.");
        this.tagId = com.google.api.client.util.Preconditions.checkNotNull(tagId, "Required parameter tagId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public RemoveTag setAlt(java.lang.String alt) {
        return (RemoveTag) super.setAlt(alt);
      }

      @Override
      public RemoveTag setFields(java.lang.String fields) {
        return (RemoveTag) super.setFields(fields);
      }

      @Override
      public RemoveTag setKey(java.lang.String key) {
        return (RemoveTag) super.setKey(key);
      }

      @Override
      public RemoveTag setOauthToken(java.lang.String oauthToken) {
        return (RemoveTag) super.setOauthToken(oauthToken);
      }

      @Override
      public RemoveTag setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (RemoveTag) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public RemoveTag setQuotaUser(java.lang.String quotaUser) {
        return (RemoveTag) super.setQuotaUser(quotaUser);
      }

      @Override
      public RemoveTag setUserIp(java.lang.String userIp) {
        return (RemoveTag) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Long reportId;

      /**

       */
      public java.lang.Long getReportId() {
        return reportId;
      }

      public RemoveTag setReportId(java.lang.Long reportId) {
        this.reportId = reportId;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.Long tagId;

      /**

       */
      public java.lang.Long getTagId() {
        return tagId;
      }

      public RemoveTag setTagId(java.lang.Long tagId) {
        this.tagId = tagId;
        return this;
      }

      @Override
      public RemoveTag set(String parameterName, Object value) {
        return (RemoveTag) super.set(parameterName, value);
      }
    }

  }

  /**
   * Builder for {@link ReportService}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          DEFAULT_ROOT_URL,
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
    }

    /** Builds a new instance of {@link ReportService}. */
    @Override
    public ReportService build() {
      return new ReportService(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link ReportServiceRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setReportServiceRequestInitializer(
        ReportServiceRequestInitializer reportserviceRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(reportserviceRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }
  }
}
